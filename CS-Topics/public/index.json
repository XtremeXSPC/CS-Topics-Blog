[{"content":"Hello everyone! My name is Costantino. I’m a computer science student and a tech enthusiast. The main purpose of this blog is to explore and share insights on some of the most exciting topics in the fascinating world of computer science.\nLet me start by explaining how I write and manage this blog.\nI primarily take notes in Obsidian, though I’m currently evaluating Emacs’ Org mode as a possible alternative. For the blog itself, I decided to use Markdown for content creation and Hugo as a powerful static site generator. Hugo not only offers a modern UI but also provides handy scripts that make the update process straightforward and efficient.\nStarting point - Obsidian If you’re not familiar with Obsidian yet, check it out at obsidian.md. You’ll discover how incredibly powerful and versatile it is!\nOnce you’ve downloaded and installed it on your PC, you’ll be ready to create amazing notes about whatever interests you the most.\nMy main setup I’ve created a directory called “Blog,” which contains a subdirectory named “posts” (yes, as you’ve probably guessed, it holds all the posts for this blog). This structure keeps my content neatly organized.\nOnce you’ve written your first note, it’s time to set up Hugo and dive into some other cool tools.\nTime for HUGO If you haven’t installed Hugo yet, you can do so by following the instructions on the official Hugo website.\nPrerequisites Install Git: https://github.com/git-guides/install-git Install Go: https://go.dev/dl/ Create a new site ## Verify Hugo works hugo version ## Create a new site hugo new site websitename cd websitename Download a Hugo Theme Find themes from this link: https://themes.gohugo.io/ follow the theme instructions on how to download. The BEST option is to install as a git submodule ## Initialize a git repository (Make sure you are in your Hugo website directory) git init ## Set global username and email parameters for git git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; ## Install a theme (we are installing the Terminal theme here). Once downloaded it should be in your Hugo themes folder ## Find a theme ---\u0026gt; https://themes.gohugo.io/ git submodule add -f https://github.com/panr/hugo-theme-terminal.git themes/terminal Adjust Hugo settings Most themes you download will have an example configuration you can use. This is usually the best way to make sure Hugo works well and out of the box. For the Terminal theme, they gave this example config below. We will edit the hugo.toml file to make these changes. —-\u0026gt; nano hugo.toml(Linux/Mac) or notepad hugo.toml (Windows) or code hugo.toml (All platforms) baseurl = \u0026#34;/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; # Add it only if you keep the theme in the `themes` directory. # Remove it if you use the theme as a remote Hugo Module. theme = \u0026#34;terminal\u0026#34; paginate = 5 [params] # dir name of your main content (default is `content/posts`). # the list of set content will show up on your index page (baseurl). contentTypeName = \u0026#34;posts\u0026#34; # if you set this to 0, only submenu trigger will be visible showMenuItems = 2 # show selector to switch language showLanguageSelector = false # set theme to full screen width fullWidthTheme = false # center theme with default width centerTheme = false # if your resource directory contains an image called `cover.(jpg|png|webp)`, # then the file will be used as a cover automatically. # With this option you don\u0026#39;t have to put the `cover` param in a front-matter. autoCover = true # set post to show the last updated # If you use git, you can set `enableGitInfo` to `true` and then post will automatically get the last updated showLastUpdated = false # Provide a string as a prefix for the last update date. By default, it looks like this: 2020-xx-xx [Updated: 2020-xx-xx] :: Author # updatedDatePrefix = \u0026#34;Updated\u0026#34; # whether to show a page\u0026#39;s estimated reading time # readingTime = false # default # whether to show a table of contents # can be overridden in a page\u0026#39;s front-matter # Toc = false # default # set title for the table of contents # can be overridden in a page\u0026#39;s front-matter # TocTitle = \u0026#34;Table of Contents\u0026#34; # default [params.twitter] # set Twitter handles for Twitter cards # see https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started#card-and-content-attribution # do not include @ creator = \u0026#34;\u0026#34; site = \u0026#34;\u0026#34; [languages] [languages.en] languageName = \u0026#34;English\u0026#34; title = \u0026#34;Terminal\u0026#34; [languages.en.params] subtitle = \u0026#34;A simple, retro theme for Hugo\u0026#34; owner = \u0026#34;\u0026#34; keywords = \u0026#34;\u0026#34; copyright = \u0026#34;\u0026#34; menuMore = \u0026#34;Show more\u0026#34; readMore = \u0026#34;Read more\u0026#34; readOtherPosts = \u0026#34;Read other posts\u0026#34; newerPosts = \u0026#34;Newer posts\u0026#34; olderPosts = \u0026#34;Older posts\u0026#34; missingContentMessage = \u0026#34;Page not found...\u0026#34; missingBackButtonLabel = \u0026#34;Back to home page\u0026#34; minuteReadingTime = \u0026#34;min read\u0026#34; words = \u0026#34;words\u0026#34; [languages.en.params.logo] logoText = \u0026#34;Terminal\u0026#34; logoHomeLink = \u0026#34;/\u0026#34; [languages.en.menu] [[languages.en.menu.main]] identifier = \u0026#34;about\u0026#34; name = \u0026#34;About\u0026#34; url = \u0026#34;/about\u0026#34; [[languages.en.menu.main]] identifier = \u0026#34;showcase\u0026#34; name = \u0026#34;Showcase\u0026#34; url = \u0026#34;/showcase\u0026#34; Test Hugo ## Verify Hugo works with your theme by running this command hugo server -t themename WALKING THROUGH THE STEPS NOTE: There is a MEGA SCRIPT later in this blog that will do everything in one go.\nSYNCING OBSIDIAN TO HUGO Windows robocopy sourcepath destination path /mir Mac/Linux rsync -av --delete \u0026#34;sourcepath\u0026#34; \u0026#34;destinationpath\u0026#34; Add some FRONTMATTER --- title: blogtitle date: 2024-11-06 draft: false tags: - tag1 - tag2 --- TRANSFER IMAGES FROM OBSIDIAN TO HUGO Windows import os import re import shutil # Paths (using raw strings to handle Windows backslashes correctly) posts_dir = r\u0026#34;C:\\Users\\chuck\\Documents\\chuckblog\\content\\posts\u0026#34; attachments_dir = r\u0026#34;C:\\Users\\chuck\\Documents\\my_second_brain\\neotokos\\Attachments\u0026#34; static_images_dir = r\u0026#34;C:\\Users\\chuck\\Documents\\chuckblog\\static\\images\u0026#34; # Step 1: Process each markdown file in the posts directory for filename in os.listdir(posts_dir): if filename.endswith(\u0026#34;.md\u0026#34;): filepath = os.path.join(posts_dir, filename) with open(filepath, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: content = file.read() # Step 2: Find all image links in the format ![Image Description](/images/Pasted%20image%20...%20.png) images = re.findall(r\u0026#39;\\[\\[([^]]*\\.png)\\]\\]\u0026#39;, content) # Step 3: Replace image links and ensure URLs are correctly formatted for image in images: # Prepare the Markdown-compatible link with %20 replacing spaces markdown_image = f\u0026#34;![Image Description](/images/{image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; content = content.replace(f\u0026#34;[[{image}]]\u0026#34;, markdown_image) # Step 4: Copy the image to the Hugo static/images directory if it exists image_source = os.path.join(attachments_dir, image) if os.path.exists(image_source): shutil.copy(image_source, static_images_dir) # Step 5: Write the updated content back to the markdown file with open(filepath, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: file.write(content) print(\u0026#34;Markdown files processed and images copied successfully.\u0026#34;) Mac/Linux import os import re import shutil # Paths posts_dir = \u0026#34;/Users/networkchuck/Documents/chuckblog/content/posts/\u0026#34; attachments_dir = \u0026#34;/Users/networkchuck/Documents/neotokos/Attachments/\u0026#34; static_images_dir = \u0026#34;/Users/networkchuck/Documents/chuckblog/static/images/\u0026#34; # Step 1: Process each markdown file in the posts directory for filename in os.listdir(posts_dir): if filename.endswith(\u0026#34;.md\u0026#34;): filepath = os.path.join(posts_dir, filename) with open(filepath, \u0026#34;r\u0026#34;) as file: content = file.read() # Step 2: Find all image links in the format ![Image Description](/images/Pasted%20image%20...%20.png) images = re.findall(r\u0026#39;\\[\\[([^]]*\\.png)\\]\\]\u0026#39;, content) # Step 3: Replace image links and ensure URLs are correctly formatted for image in images: # Prepare the Markdown-compatible link with %20 replacing spaces markdown_image = f\u0026#34;![Image Description](/images/{image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; content = content.replace(f\u0026#34;[[{image}]]\u0026#34;, markdown_image) # Step 4: Copy the image to the Hugo static/images directory if it exists image_source = os.path.join(attachments_dir, image) if os.path.exists(image_source): shutil.copy(image_source, static_images_dir) # Step 5: Write the updated content back to the markdown file with open(filepath, \u0026#34;w\u0026#34;) as file: file.write(content) print(\u0026#34;Markdown files processed and images copied successfully.\u0026#34;) SETUP GITHUB Git yourself an account Then create a repo AUTHENTICATE YOURSELF ## Generate an SSH key (Mac/Linux/Windows) ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; PUSH TO GITHUB # Step 8: Push the public folder to the hostinger branch using subtree split and force push echo \u0026#34;Deploying to GitHub Hostinger...\u0026#34; git subtree split --prefix public -b hostinger-deploy git push origin hostinger-deploy:hostinger --force git branch -D hostinger-deploy THE MEGA SCRIPT WINDOWS (POWERSHELL) # PowerShell Script for Windows # Set variables for Obsidian to Hugo copy $sourcePath = \u0026#34;C:\\Users\\path\\to\\obsidian\\posts\u0026#34; $destinationPath = \u0026#34;C:\\Users\\path\\to\\hugo\\posts\u0026#34; # Set Github repo $myrepo = \u0026#34;reponame\u0026#34; # Set error handling $ErrorActionPreference = \u0026#34;Stop\u0026#34; Set-StrictMode -Version Latest # Change to the script\u0026#39;s directory $ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition Set-Location $ScriptDir # Check for required commands $requiredCommands = @(\u0026#39;git\u0026#39;, \u0026#39;hugo\u0026#39;) # Check for Python command (python or python3) if (Get-Command \u0026#39;python\u0026#39; -ErrorAction SilentlyContinue) { $pythonCommand = \u0026#39;python\u0026#39; } elseif (Get-Command \u0026#39;python3\u0026#39; -ErrorAction SilentlyContinue) { $pythonCommand = \u0026#39;python3\u0026#39; } else { Write-Error \u0026#34;Python is not installed or not in PATH.\u0026#34; exit 1 } foreach ($cmd in $requiredCommands) { if (-not (Get-Command $cmd -ErrorAction SilentlyContinue)) { Write-Error \u0026#34;$cmd is not installed or not in PATH.\u0026#34; exit 1 } } # Step 1: Check if Git is initialized, and initialize if necessary if (-not (Test-Path \u0026#34;.git\u0026#34;)) { Write-Host \u0026#34;Initializing Git repository...\u0026#34; git init git remote add origin $myrepo } else { Write-Host \u0026#34;Git repository already initialized.\u0026#34; $remotes = git remote if (-not ($remotes -contains \u0026#39;origin\u0026#39;)) { Write-Host \u0026#34;Adding remote origin...\u0026#34; git remote add origin $myrepo } } # Step 2: Sync posts from Obsidian to Hugo content folder using Robocopy Write-Host \u0026#34;Syncing posts from Obsidian...\u0026#34; if (-not (Test-Path $sourcePath)) { Write-Error \u0026#34;Source path does not exist: $sourcePath\u0026#34; exit 1 } if (-not (Test-Path $destinationPath)) { Write-Error \u0026#34;Destination path does not exist: $destinationPath\u0026#34; exit 1 } # Use Robocopy to mirror the directories $robocopyOptions = @(\u0026#39;/MIR\u0026#39;, \u0026#39;/Z\u0026#39;, \u0026#39;/W:5\u0026#39;, \u0026#39;/R:3\u0026#39;) $robocopyResult = robocopy $sourcePath $destinationPath @robocopyOptions if ($LASTEXITCODE -ge 8) { Write-Error \u0026#34;Robocopy failed with exit code $LASTEXITCODE\u0026#34; exit 1 } # Step 3: Process Markdown files with Python script to handle image links Write-Host \u0026#34;Processing image links in Markdown files...\u0026#34; if (-not (Test-Path \u0026#34;images.py\u0026#34;)) { Write-Error \u0026#34;Python script images.py not found.\u0026#34; exit 1 } # Execute the Python script try { \u0026amp; $pythonCommand images.py } catch { Write-Error \u0026#34;Failed to process image links.\u0026#34; exit 1 } # Step 4: Build the Hugo site Write-Host \u0026#34;Building the Hugo site...\u0026#34; try { hugo } catch { Write-Error \u0026#34;Hugo build failed.\u0026#34; exit 1 } # Step 5: Add changes to Git Write-Host \u0026#34;Staging changes for Git...\u0026#34; $hasChanges = (git status --porcelain) -ne \u0026#34;\u0026#34; if (-not $hasChanges) { Write-Host \u0026#34;No changes to stage.\u0026#34; } else { git add . } # Step 6: Commit changes with a dynamic message $commitMessage = \u0026#34;New Blog Post on $(Get-Date -Format \u0026#39;yyyy-MM-dd HH:mm:ss\u0026#39;)\u0026#34; $hasStagedChanges = (git diff --cached --name-only) -ne \u0026#34;\u0026#34; if (-not $hasStagedChanges) { Write-Host \u0026#34;No changes to commit.\u0026#34; } else { Write-Host \u0026#34;Committing changes...\u0026#34; git commit -m \u0026#34;$commitMessage\u0026#34; } # Step 7: Push all changes to the main branch Write-Host \u0026#34;Deploying to GitHub Master...\u0026#34; try { git push origin master } catch { Write-Error \u0026#34;Failed to push to Master branch.\u0026#34; exit 1 } # Step 8: Push the public folder to the hostinger branch using subtree split and force push Write-Host \u0026#34;Deploying to GitHub Hostinger...\u0026#34; # Check if the temporary branch exists and delete it $branchExists = git branch --list \u0026#34;hostinger-deploy\u0026#34; if ($branchExists) { git branch -D hostinger-deploy } # Perform subtree split try { git subtree split --prefix public -b hostinger-deploy } catch { Write-Error \u0026#34;Subtree split failed.\u0026#34; exit 1 } # Push to hostinger branch with force try { git push origin hostinger-deploy:hostinger --force } catch { Write-Error \u0026#34;Failed to push to hostinger branch.\u0026#34; git branch -D hostinger-deploy exit 1 } # Delete the temporary branch git branch -D hostinger-deploy Write-Host \u0026#34;All done! Site synced, processed, committed, built, and deployed.\u0026#34; LINUX/MAC (BASH) #!/bin/bash set -euo pipefail # Change to the script\u0026#39;s directory SCRIPT_DIR=\u0026#34;$(cd \u0026#34;$(dirname \u0026#34;${BASH_SOURCE[0]}\u0026#34;)\u0026#34; \u0026amp;\u0026amp; pwd)\u0026#34; cd \u0026#34;$SCRIPT_DIR\u0026#34; # Set variables for Obsidian to Hugo copy sourcePath=\u0026#34;/Users/path/to/obsidian/posts\u0026#34; destinationPath=\u0026#34;/Users/path/to/hugo/posts\u0026#34; # Set GitHub Repo myrepo=\u0026#34;reponame\u0026#34; # Check for required commands for cmd in git rsync python3 hugo; do if ! command -v $cmd \u0026amp;\u0026gt; /dev/null; then echo \u0026#34;$cmd is not installed or not in PATH.\u0026#34; exit 1 fi done # Step 1: Check if Git is initialized, and initialize if necessary if [ ! -d \u0026#34;.git\u0026#34; ]; then echo \u0026#34;Initializing Git repository...\u0026#34; git init git remote add origin $myrepo else echo \u0026#34;Git repository already initialized.\u0026#34; if ! git remote | grep -q \u0026#39;origin\u0026#39;; then echo \u0026#34;Adding remote origin...\u0026#34; git remote add origin $myrepo fi fi # Step 2: Sync posts from Obsidian to Hugo content folder using rsync echo \u0026#34;Syncing posts from Obsidian...\u0026#34; if [ ! -d \u0026#34;$sourcePath\u0026#34; ]; then echo \u0026#34;Source path does not exist: $sourcePath\u0026#34; exit 1 fi if [ ! -d \u0026#34;$destinationPath\u0026#34; ]; then echo \u0026#34;Destination path does not exist: $destinationPath\u0026#34; exit 1 fi rsync -av --delete \u0026#34;$sourcePath\u0026#34; \u0026#34;$destinationPath\u0026#34; # Step 3: Process Markdown files with Python script to handle image links echo \u0026#34;Processing image links in Markdown files...\u0026#34; if [ ! -f \u0026#34;images.py\u0026#34; ]; then echo \u0026#34;Python script images.py not found.\u0026#34; exit 1 fi if ! python3 images.py; then echo \u0026#34;Failed to process image links.\u0026#34; exit 1 fi # Step 4: Build the Hugo site echo \u0026#34;Building the Hugo site...\u0026#34; if ! hugo; then echo \u0026#34;Hugo build failed.\u0026#34; exit 1 fi # Step 5: Add changes to Git echo \u0026#34;Staging changes for Git...\u0026#34; if git diff --quiet \u0026amp;\u0026amp; git diff --cached --quiet; then echo \u0026#34;No changes to stage.\u0026#34; else git add . fi # Step 6: Commit changes with a dynamic message commit_message=\u0026#34;New Blog Post on $(date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; if git diff --cached --quiet; then echo \u0026#34;No changes to commit.\u0026#34; else echo \u0026#34;Committing changes...\u0026#34; git commit -m \u0026#34;$commit_message\u0026#34; fi # Step 7: Push all changes to the main branch echo \u0026#34;Deploying to GitHub Main...\u0026#34; if ! git push origin main; then echo \u0026#34;Failed to push to main branch.\u0026#34; exit 1 fi # Step 8: Push the public folder to the hostinger branch using subtree split and force push echo \u0026#34;Deploying to GitHub Hostinger...\u0026#34; if git branch --list | grep -q \u0026#39;hostinger-deploy\u0026#39;; then git branch -D hostinger-deploy fi if ! git subtree split --prefix public -b hostinger-deploy; then echo \u0026#34;Subtree split failed.\u0026#34; exit 1 fi if ! git push origin hostinger-deploy:hostinger --force; then echo \u0026#34;Failed to push to hostinger branch.\u0026#34; git branch -D hostinger-deploy exit 1 fi git branch -D hostinger-deploy echo \u0026#34;All done! Site synced, processed, committed, built, and deployed.\u0026#34; ","permalink":"https://lcs-developer.it/posts/why-this-blog-and-how-i-manage-it/","summary":"\u003cp\u003eHello everyone! My name is Costantino. I’m a computer science student and a tech enthusiast. The main purpose of this blog is to explore and share insights on some of the most exciting topics in the fascinating world of computer science.\u003c/p\u003e\n\u003cp\u003eLet me start by explaining how I write and manage this blog.\u003c/p\u003e\n\u003cp\u003eI primarily take notes in Obsidian, though I’m currently evaluating Emacs’ Org mode as a possible alternative. For the blog itself, I decided to use Markdown for content creation and Hugo as a powerful static site generator. Hugo not only offers a modern UI but also provides handy scripts that make the update process straightforward and efficient.\u003c/p\u003e","title":"My first blog post!"}]